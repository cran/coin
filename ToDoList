
o       formula interface to wilcoxsign_test is brain damaged
        y ~ 1 must be OK
        

bug: 
y<-c(1.11,2.22,3.33,0,100,1)
x<-as.factor(c(1,1,0,0,1,0))

foo <- function(f) 
    .Call("R_split_up_2sample", f * y, as.integer(3), sum(f * y[x == "0"]), PACKAGE = "coin")
sapply(1:100, foo)



o       implement `pperm(x, q, lower.tail = TRUE)'

o       more checks on direct `ytrafo = foo' constructs

o       improve error messages

o       add checks on achieved alpha in confint (see wilcox.test changes by
        Thomas L)

o	some classes are the same in `coin' and `party': can they conflict?

o	maxstat_tests scales poorly for very large problems (number of obs)
        maybe we can look at each 2-sample problem separately?

        - unify min/maxprop arguments to something like `quantiles = c(...)'
          (either of length 2 or arbitrary)

o	compare multiple test procedures with multtest and add more checks,
        compare with Peter Westfalls example

        [done]

o	check spearman_test vs. cor.test

o	definition of two-sided p-values in ansari.test contradicts the one
        used here in some cases (-> regtest_2samples.R)

o	confint() after contrast_test:	how to check if ranks were used???
	labels of `contrMat' and direction of differences don't match

o	check storage.mode of all vars going into C code (MC)

o	add wilcoxon-gehan scores, check logrank scores!

o	check if trend tests for clustered data are part of the framework

o	maximally selected McNemar statistics -> Betensky, Biometrics, 2000

o	visualize deviations from H_0 for all problems (in a way
	motivated by shaded mosaicplots)

o	mh_test with weights

o	free W1 and W2 in `vandeWiel.c' in case of an error

o	enable confidence intervals in the presence of blocks or weights

o	check whats happening here

	d <- data.frame(y = rnorm(20), x = gl(2, 10))
	d$y[d$x == "1"] <- d$y[d$x == "1"] * 2

	wt <- ansari_test(y ~ x, data = d, di = "ex", conf.int = TRUE)
	pvalue(wt)

	confint(wt, level = 1 - pvalue(wt))  

o	Kurt: trafo as family of transformations (see glm(..., family,...)

o	should we have `distribution = "none"'?

o       some trafos need to take weights into account -> ranks?
