
R : Copyright 2005, The R Foundation for Statistical Computing
Version 2.1.0 Under development (unstable) (2005-03-11), ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for a HTML browser interface to help.
Type 'q()' to quit R.

> 
> ### Regression tests for the 2 sample problem, i.e.,
> ### testing the independence of a numeric variable
> ### `y' and a binary factor `x' (possibly blocked)
> 
> set.seed(290875)
> library(coin)
Loading required package: survival
Loading required package: splines
Loading required package: mvtnorm
> isequal <- coin:::isequal
> 
> ### generate data
> dat <- data.frame(x = gl(2, 50), y = rnorm(100), block = gl(5, 20))[sample(1:100,
+ 75),]
> 
> ### Wilcoxon Mann-Whitney Rank Sum Test
> 
> ### asymptotic distribution
> ptwo <- wilcox.test(y ~ x, data = dat, correct = FALSE, exact = FALSE)$p.value
> pless <- wilcox.test(y ~ x, data = dat, alternative = "less", 
+                      correct = FALSE, exact = FALSE)$p.value
> pgreater <- wilcox.test(y ~ x, data = dat, alternative = "greater", 
+                         correct = FALSE, exact = FALSE)$p.value
> 
> stopifnot(isequal(pvalue(wilcox_test(y ~ x, data = dat)), ptwo))
> stopifnot(isequal(pvalue(wilcox_test(y ~ x, data = dat, alternative = "less")),
+                   pless))
> stopifnot(isequal(pvalue(wilcox_test(y ~ x, data = dat, alternative = "greater")), 
+                   pgreater))
> 
> stopifnot(isequal(pvalue(oneway_test(y ~ x, data = dat, distribution = "asympt", 
+     ytrafo = function(data) trafo(data, numeric_trafo = rank))), ptwo))
> stopifnot(isequal(pvalue(oneway_test(y ~ x, data = dat, distribution = "asympt", 
+     ytrafo = function(data) trafo(data, numeric_trafo = rank), 
+     alternative = "less")), pless))
> stopifnot(isequal(pvalue(oneway_test(y ~ x, data = dat, distribution = "asympt", 
+     ytrafo = function(data) trafo(data, numeric_trafo = rank), 
+     alternative = "greater")), pgreater))
> 
> ### exact distribution
> ptwo <- wilcox.test(y ~ x, data = dat, exact = TRUE)$p.value
> pless <- wilcox.test(y ~ x, data = dat, alternative = "less", exact = TRUE)$p.value
> pgreater <- wilcox.test(y ~ x, data = dat, alternative = "greater", 
+                         exact = TRUE)$p.value
> 
> stopifnot(isequal(pvalue(wilcox_test(y ~ x, data = dat, distribution = "exact")), 
+                   ptwo))
> stopifnot(isequal(pvalue(wilcox_test(y ~ x, data = dat, alternative = "less", 
+                              distribution = "exact")), pless))
> stopifnot(isequal(pvalue(wilcox_test(y ~ x, data = dat, alternative = "greater",
+                              distribution = "exact")), pgreater))
> 
> stopifnot(isequal(pvalue(oneway_test(y ~ x, data = dat, distribution = "exact", 
+     ytrafo = function(data) trafo(data, numeric_trafo = rank))), ptwo))
> stopifnot(isequal(pvalue(oneway_test(y ~ x, data = dat, distribution = "exact", 
+     ytrafo = function(data) trafo(data, numeric_trafo = rank), 
+     alternative = "less")), pless))
> stopifnot(isequal(pvalue(oneway_test(y ~ x, data = dat, distribution = "exact", 
+     ytrafo = function(data) trafo(data, numeric_trafo = rank), 
+     alternative = "greater")), pgreater))
> 
> ### approximated distribution
> rtwo <- pvalue(wilcox_test(y ~ x, data = dat, distribution = "approx")) / ptwo
> rless <- pvalue(wilcox_test(y ~ x, data = dat, alternative = "less",
+                    distribution = "approx")) / pless
> rgreater <- pvalue(wilcox_test(y ~ x, data = dat, alternative = "greater",
+                    distribution = "approx")) / pgreater
> stopifnot(all(c(rtwo, rless, rgreater) > 0.9 & 
+               c(rtwo, rless, rgreater) < 1.1))
> 
> ### <FIXME> add block examples </FIXME>
> 
> pvalue(wilcox_test(y ~ x | block, data = dat, distribution = "asympt"))
[1] 0.1794892
> pvalue(wilcox_test(y ~ x | block, data = dat, distribution = "approx"))
[1] 0.197
99 percent confidence interval:
 0.1656172 0.2313194 

> pvalue(wilcox_test(y ~ x | block, data = dat, distribution = "exact"))
[1] 0.1847028
> 
> pvalue(wilcox_test(y ~ x | block, data = dat, distribution = "asympt", 
+                    alternative = "less"))
[1] 0.0897446
> pvalue(wilcox_test(y ~ x | block, data = dat, distribution = "approx", 
+                    alternative = "less"))
[1] 0.099
99 percent confidence interval:
 0.07613518 0.12577658 

> pvalue(wilcox_test(y ~ x | block, data = dat, distribution = "exact", 
+                    alternative = "less"))
[1] 0.09335664
> 
> pvalue(wilcox_test(y ~ x | block, data = dat, distribution = "asympt", 
+                    alternative = "greater"))
[1] 0.9102554
> pvalue(wilcox_test(y ~ x | block, data = dat, distribution = "approx", 
+                    alternative = "greater"))
[1] 0.917
99 percent confidence interval:
 0.8919859 0.9379376 

> pvalue(wilcox_test(y ~ x | block, data = dat, distribution = "exact", 
+                    alternative = "greater"))
[1] 0.9098776
> 
> ### sanify checks
> try(wilcox_test(x ~ y, data = dat))
Error in check(itp) : 'object' does not represent a two sample problem
> try(wilcox_test(x ~ y | y, data = dat))
Error in checkSlotAssignment(object, name, value) : 
	assignment of an object of class "numeric" is not valid for slot 'block' in an object of class "IndependenceProblem"; is(value, "factor") is not TRUE
> 
> ### Ansari-Bradley Test 
> 
> ### asymptotic distribution
> ptwo <- ansari.test(y ~ x, data = dat, correct = FALSE, exact = FALSE)$p.value
> pless <- ansari.test(y ~ x, data = dat, alternative = "less", 
+                      correct = FALSE, exact = FALSE)$p.value
> pgreater <- ansari.test(y ~ x, data = dat, alternative = "greater", 
+                         correct = FALSE, exact = FALSE)$p.value
> 
> stopifnot(isequal(pvalue(ansari_test(y ~ x, data = dat)), ptwo))
> stopifnot(isequal(pvalue(ansari_test(y ~ x, data = dat, alternative = "less")),
+                   pless))
> stopifnot(isequal(pvalue(ansari_test(y ~ x, data = dat, alternative = "greater")), 
+                   pgreater))
> 
> stopifnot(isequal(pvalue(oneway_test(y ~ x, data = dat, distribution = "asympt", 
+     ytrafo = function(data) trafo(data, numeric_trafo = ansari_trafo))), ptwo))
> stopifnot(isequal(pvalue(oneway_test(y ~ x, data = dat, distribution = "asympt", 
+     ytrafo = function(data) trafo(data, numeric_trafo = ansari_trafo), 
+     alternative = "greater")), pless))
> stopifnot(isequal(pvalue(oneway_test(y ~ x, data = dat, distribution = "asympt", 
+     ytrafo = function(data) trafo(data, numeric_trafo = ansari_trafo), 
+     alternative = "less")), pgreater))
> 
> ### exact distribution
> ptwo <- ansari.test(y ~ x, data = dat, exact = TRUE)$p.value
> pless <- ansari.test(y ~ x, data = dat, alternative = "less", exact = TRUE)$p.value
> pgreater <- ansari.test(y ~ x, data = dat, alternative = "greater", 
+                         exact = TRUE)$p.value
> 
> ### <FIXME>: Definition of two-sided P-values! </FIXME>
> (isequal(pvalue(ansari_test(y ~ x, data = dat, distribution = "exact")), 
+                   ptwo))
[1] 0.2125862712
[1] 0.2135741290
[1] FALSE
> stopifnot(isequal(pvalue(ansari_test(y ~ x, data = dat, alternative = "less", 
+                              distribution = "exact")), pless))
> stopifnot(isequal(pvalue(ansari_test(y ~ x, data = dat, alternative = "greater",
+                              distribution = "exact")), pgreater))
> 
> ### <FIXME>: Definition of two-sided P-values! </FIXME>
> (isequal(pvalue(oneway_test(y ~ x, data = dat, distribution = "exact", 
+     ytrafo = function(data) trafo(data, numeric_trafo = ansari_trafo))), ptwo))
[1] 0.2125862712
[1] 0.2135741290
[1] FALSE
> stopifnot(isequal(pvalue(oneway_test(y ~ x, data = dat, distribution = "exact", 
+     ytrafo = function(data) trafo(data, numeric_trafo = ansari_trafo), 
+     alternative = "greater")), pless))
> stopifnot(isequal(pvalue(oneway_test(y ~ x, data = dat, distribution = "exact", 
+     ytrafo = function(data) trafo(data, numeric_trafo = ansari_trafo), 
+     alternative = "less")), pgreater))
> 
> ### approximated distribution
> rtwo <- pvalue(ansari_test(y ~ x, data = dat, distribution = "approx")) / ptwo
> rless <- pvalue(ansari_test(y ~ x, data = dat, alternative = "less",
+                    distribution = "approx")) / pless
> rgreater <- pvalue(ansari_test(y ~ x, data = dat, alternative = "greater",
+                    distribution = "approx")) / pgreater
> ### <FIXME> ??? </FIXME>
> (all(c(rtwo, rless, rgreater) > 0.9 & 
+               c(rtwo, rless, rgreater) < 1.1))
[1] TRUE
> 
> ### <FIXME> add block examples </FIXME>
> 
> ### sanify checks
> try(ansari_test(x ~ y, data = dat))
Error in check(itp) : 'object' does not represent a two sample problem
> try(ansari_test(x ~ y | y, data = dat))
Error in checkSlotAssignment(object, name, value) : 
	assignment of an object of class "numeric" is not valid for slot 'block' in an object of class "IndependenceProblem"; is(value, "factor") is not TRUE
> 
> ### the remaining three candidates
> ### asymptotic distribution
> ptwo <- wilcox.test(y ~ x, data = dat, correct = FALSE)$p.value
> pless <- wilcox.test(y ~ x, data = dat, alternative = "less",
+                      correct = FALSE)$p.value
> pgreater <- wilcox.test(y ~ x, data = dat, alternative = "greater", 
+                         correct = FALSE)$p.value
> 
> oneway_test(y ~ x, dat = dat)

	Asymptotical 2-Sample Permutation Test

data:  y by groups 1, 2 
T = -0.7774, p-value = 0.4369
alternative hypothesis: true mu is not equal to 0 

> oneway_test(y ~ x, dat = dat, alternative = "less")

	Asymptotical 2-Sample Permutation Test

data:  y by groups 1, 2 
T = -0.7774, p-value = 0.2185
alternative hypothesis: true mu is less than 0 

> oneway_test(y ~ x, dat = dat, alternative = "greater")

	Asymptotical 2-Sample Permutation Test

data:  y by groups 1, 2 
T = -0.7774, p-value = 0.7815
alternative hypothesis: true mu is greater than 0 

> 
> normal_test(y ~ x, dat = dat)

	Asymptotical Normal Quantile (van der Waerden) Test

data:  y by groups 1, 2 
T = -0.8596, p-value = 0.39
alternative hypothesis: true mu is not equal to 0 

> normal_test(y ~ x, dat = dat, alternative = "less")

	Asymptotical Normal Quantile (van der Waerden) Test

data:  y by groups 1, 2 
T = -0.8596, p-value = 0.195
alternative hypothesis: true mu is less than 0 

> normal_test(y ~ x, dat = dat, alternative = "greater")

	Asymptotical Normal Quantile (van der Waerden) Test

data:  y by groups 1, 2 
T = -0.8596, p-value = 0.805
alternative hypothesis: true mu is greater than 0 

> 
> median_test(y ~ x, dat = dat)

	Asymptotical Median Test

data:  y by groups 1, 2 
T = 0.8015, p-value = 0.4228
alternative hypothesis: true mu is not equal to 0 

> median_test(y ~ x, dat = dat, alternative = "less")

	Asymptotical Median Test

data:  y by groups 1, 2 
T = 0.8015, p-value = 0.7886
alternative hypothesis: true mu is less than 0 

> median_test(y ~ x, dat = dat, alternative = "greater")

	Asymptotical Median Test

data:  y by groups 1, 2 
T = 0.8015, p-value = 0.2114
alternative hypothesis: true mu is greater than 0 

> 
> ### confidence intervals, cf Bauer 1972
> location <- data.frame(y = c(6, 20, 27, 38, 46, 51, 54, 57,
+                              10, 12, 15, 21, 32, 40, 41, 45),
+                        x = gl(2, 8))
> 
> ci <- confint(normal_test(y ~ x, data = location, 
+                           conf.int = TRUE, di = "ex"))
> stopifnot(isequal(ci$conf.int, c(-6, 30)))
> stopifnot(isequal(ci$estimate, 11))
> 
> wt <- wilcox.test(y ~ x, data = location, 
+                   conf.int = TRUE)
> ci <- confint(wilcox_test(y ~ x, data = location, 
+                           conf.int = TRUE, di = "ex"))
> stopifnot(isequal(wt$confint, ci$confint))
> stopifnot(isequal(wt$estimate, ci$estimate))
> 
> scale <- data.frame(y = c(-101, -35, -13, 10, 130, 236, 370, 556,
+                           -145, -140, -40, -30, 2, 27, 68, 290),
+                     x = gl(2, 8))
> 
> ci <- confint(ansari_test(y ~ x, data = scale, conf.int = TRUE, 
+                           di = "ex", conf.level = 0.988))
> stopifnot(isequal(ci$conf.int, c(10, 556) / c(68, 27)))
> stopifnot(isequal(ci$estimate, mean(c(35/30, 370 / 290))))
> 
> 
